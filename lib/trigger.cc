/* -*- c++ -*- */
/*
 * Copyright 2011 Free Software Foundation, Inc.
 * 
 * This file is part of gr-eventstream
 * 
 * gr-eventstream is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * gr-eventstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with gr-eventstream; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <eventstream/trigger.h>
#include <eventstream/queue.h>
#include <gnuradio/io_signature.h>
#include <stdio.h>

namespace gr {
namespace eventstream {
/*
 * Create a new instance of eventstream_trigger and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
/*"eventstream_trigger_sptr 
eventstream_make_trigger (pmt_t arb, eventstream_queue_sptr queue, int itemsize, std::string blkname)
{
  return eventstream_trigger_sptr (new eventstream_trigger (arb,queue,itemsize,blkname));
}*/

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr::block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
eventstream_trigger::eventstream_trigger ()
  : d_time(0), d_length(1), d_lookback(0)
{
    message_port_register_out(pmt::intern("which_stream"));
}

eventstream_trigger::~eventstream_trigger ()
{
}

int 
eventstream_trigger::work (int noutput_items,
			gr_vector_const_void_star &input_items,
			gr_vector_void_star &output_items)
{
    // never call the base class directly
    throw std::runtime_error("eventstream_trigger::general_work() accessed directly, please override!\n");
}

pmt_t eventstream_trigger::event_type(int idx){
    assert(event_types.size()>idx); 
    return event_types[idx]; 
}

}
}
