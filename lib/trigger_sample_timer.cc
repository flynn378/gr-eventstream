/* -*- c++ -*- */
/*
 * Copyright 2011 Free Software Foundation, Inc.
 * 
 * This file is part of gr-eventstream
 * 
 * gr-eventstream is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * gr-eventstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with gr-eventstream; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <eventstream/api.h>
#include <eventstream/trigger_sample_timer.h>
#include <gnuradio/io_signature.h>
#include <stdio.h>
#include <string.h>

namespace gr {
namespace eventstream {
/*
 * Create a new instance of eventstream_trigger_sample_timer and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
eventstream_trigger_sample_timer_sptr 
eventstream_make_trigger_sample_timer (int itemsize, int period, int shift, int sched_dist, int event_length){
  return eventstream_trigger_sample_timer_sptr (new eventstream_trigger_sample_timer (itemsize,period,shift,sched_dist,event_length));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr::block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 0;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

eventstream_trigger_sample_timer::eventstream_trigger_sample_timer (int itemsize, int period, int shift, int sched_dist, int event_length)
  : d_period(period), d_shift(shift),
    d_time(0), d_evt_time(shift), d_evt_len(event_length), d_sched_dist(sched_dist),
    d_enabled(true), d_itemsize(itemsize),
    gr::sync_block("eventstream_trigger_sample_timer",
        gr::io_signature::make(MIN_IN, MAX_IN,  itemsize),
        gr::io_signature::make(MIN_OUT,MAX_OUT, itemsize))
{
    register_handler("sample_timer_event");
}

eventstream_trigger_sample_timer::~eventstream_trigger_sample_timer ()
{
}

int 
eventstream_trigger_sample_timer::work (int noutput_items,
			gr_vector_const_void_star &input_items,
			gr_vector_void_star &output_items)
{
  
  // if output port is connected copy all our outputs across
  //   this may be used to rate limit things downstream
  if(output_items.size() > 0){
    memcpy( output_items[0], input_items[0], d_itemsize * noutput_items);
  }
  
  // schedule new events as we step along ...
  while(d_evt_time < d_time + noutput_items + d_sched_dist){
    d_evt_time += d_period;
    if(d_enabled){
        pmt_t evt = event_create( pmt::mp("sample_timer_event"), d_evt_time, d_evt_len );
        message_port_pub(pmt::mp("which_stream"), evt);
        }
    }  
  
  
  // consume the current input items
  d_time += noutput_items;
  return noutput_items;
  
}
}
}


